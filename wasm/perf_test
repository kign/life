#! /usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');

const defaults = {density: 0.3, iterations: 1000};

// current about-the-best result on copernicus (MB Pro late 2019, 2.4 GHz i5)
// (line counting included)
// [1200x1600] Computed 1000 iterations in 11.232 seconds @ 89.03 fps

const args = require('yargs')
    .usage('Usage: $0 [options] WIDTHxHEIGHT')
    .version('0.1')
    .alias('h', 'help')
    .option('density', {
    	type: 'number',
    	alias: 'd',
    	describe: 'density for randomized board generation',
    	default: defaults.density
    })
    .option('seed', {
    	type: 'number',
    	alias: 's',
    	describe: 'Seed for randomized board generation (if omitted results will be different every time)'
    })
    .option('iterations', {
    	type: 'number',
    	alias: 'i',
    	describe: 'Number of iterations',
    	default: defaults.iterations
    })
    .demandCommand(1, 1)
    .strict()
    .argv;

async function main () {
	if (args.seed === undefined)
		args.seed = Math.random() * 2**32;

	if (isNaN(args.seed)) {
		console.error("Seed must be a number");
		process.exit(1);
	}
	if (isNaN(args.density)) {
		console.error("density must be a number");
		process.exit(1);
	}
	if (isNaN(args.iterations)) {
		console.error("iterations must be a number");
		process.exit(1);
	}
	if (args.density <= 0 || args.density >= 1) {
		console.error("density must be a number, not", args.density);
		process.exit(1);
	}
	if (args.iterations < 2 || args.iterations > 1e9) {
		console.error("density must be a number between 2 and 1e9, not", args.iterations);
		process.exit(1);
	}
	args.seed = Math.floor(args.seed)
	args.iterations = Math.floor(args.iterations)

	// console.log("args =", args);
	const m = args._[0].match(/^(\d+)x(\d+)$/i);
	if (!m) {
		console.error(`Invalid dimension ${args._[0]}, should be WIDTHxHEIGHT, e.g. 1200x1600`);
		process.exit(1);
	}

	const X = parseInt(m[1]);
	const Y = parseInt(m[2]);

    const life_wasm = path.resolve(__dirname, '../docs/life.wasm');
    console.log("File", 'life.wasm', "last changed",
        fs.statSync(life_wasm).mtime.toLocaleString('UK'), "local time");
    const wasm_bytes = new Uint8Array(fs.readFileSync(life_wasm));

    const wasm_log = (a, b) => console.log(`wasm[${a}] ${b}`);
    const pages = 2 * Math.ceil(X * Y / 16000);
    const memory = new WebAssembly.Memory({initial: pages,maximum: pages});

    const callback = function(X, Y, iter, count, hash) {
    	//console.log(count);
        return 0;
    }

    const life_run = (await WebAssembly.instantiate(wasm_bytes,  {js: { mem: memory, log: wasm_log, callback: callback }})).instance.exports.run;

    const mem = new Uint32Array(memory.buffer);
    const rand = mulberry32(args.seed);

    for (let ii = 0; ii < X * Y; ii++)
        mem[ii] = (rand() < args.density)? 1: 0;
    const t0 =  Date.now();
    const n = life_run(X, Y, args.iterations);
    const dt =  (Date.now() - t0) / 1000.0;
    console.log(`[${X}x${Y}] Computed ${n} iterations in ${dt} seconds @ ${(n/dt).toFixed(2)} fps`);
}

// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript
function mulberry32(a) {
    return function() {
      var t = a += 0x6D2B79F5;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) / 4294967296;
    }
}

main();
