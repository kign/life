#! /usr/bin/env node
'use strict';

const fs = require('fs');

function readt(s) {
    const rows = s.trim().split('\n');
    const Y = rows.length;
    const X = rows[0].length;
    if (rows.map(r => r.length).filter(v => v !== X).length > 0) {
        console.error('ERROR: Invalid input');
        process.exit(1);
    }

    return [X, Y, rows.map(r => r.split('').map(x => (x === 'x') ? 1 : 0)).flat()];
}

function savet(X, Y, mem) {
    return mem.map((val,idx) => ((val===1)?'x':'.') + (((1+idx) % X)?'':'\n')).join('');
}

async function main() {
    const[X, Y, start] = readt(`
..........
......x...
....xxx...
.....x....
..........
..........
..........
..........
..........
..........
`);

    const wasm_bytes = new Uint8Array(fs.readFileSync('../docs/life.wasm'));
    const wasm_log = (a, b) => console.log(`wasm[${a}] ${b}`);
    const pages = Math.ceil(X * Y / 64000);
    const memory = new WebAssembly.Memory({initial: pages,maximum: pages});

    const callback = function(X, Y, iter, hash) {
        return 0;
    }

    const life_run = (await WebAssembly.instantiate(wasm_bytes,  {js: { mem: memory, log: wasm_log, callback: callback }})).instance.exports.run;

    const mem = new Uint32Array(memory.buffer);
    for (let ii = 0; ii < X * Y; ii++)
        mem[ii] = start[ii];
    const res = life_run(X, Y, 100);
    //console.log("wasm_run returned after", res, "iterations");
    if (res !== 100) {
        console.error("FAILED: returned", res, "(expected 100");
        process.exit(1);
    }
    const expected = `
..........
..x.......
.x.x......
.x..x.x...
.xxxxx.x..
.xx..xx...
....x.....
....x.....
..........
..........
`;

    const end = '\n' + savet(X, Y, Array.from(mem.subarray(0,X*Y)));
    if (end !== expected) {
        process.stdout.write("Expected" + expected + "Received\n" + end);
        console.error("FAILED");
        process.exit(1)
    }

    console.log("PASSED");
}

main();
