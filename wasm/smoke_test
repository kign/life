#! /usr/bin/env node
'use strict';

const fs = require('fs');
const assert = require('assert').strict;
const path = require('path');

function readt(s) {
    const rows = s.trim().split('\n');
    const Y = rows.length;
    const X = rows[0].length;
    if (rows.map(r => r.length).filter(v => v !== X).length > 0) {
        console.error('ERROR: Invalid input');
        process.exit(1);
    }

    return [X, Y, rows.map(r => r.split('').map(x => (x === 'x') ? 1 : 0)).flat()];
}

function savet(X, Y, mem) {
    return mem.map((val,idx) => ((val===1)?'x':'.') + (((1+idx) % X)?'':'\n')).join('');
}

async function main() {
    const[X, Y, start] = readt(`
..........
......x...
....xxx...
.....x....
..........
..........
..........
..........
..........
..........
`);

    const life_wasm = process.argv[2]? process.argv[2]: path.resolve(__dirname, '../docs/life.wasm');
    console.log("File", life_wasm, "last changed",
        fs.statSync(life_wasm).mtime.toLocaleString('UK'), "local time");
    const wasm_bytes = new Uint8Array(fs.readFileSync(life_wasm));
    const wasm_log = (a, b) => console.log(`wasm[${a}] ${b}`);
    const pages = Math.ceil(X * Y / 64000);
    const memory = new WebAssembly.Memory({initial: pages,maximum: pages});
    const mem = new Uint32Array(memory.buffer);

    let iters = 1;
    const callback = function(cbX, cbY, cbIter, cbCount, cbHash) {
        //console.log(cbX, cbY, cbIter, cbCount, cbHash);
        assert.equal(X, cbX);
        assert.equal(Y, cbY, `Y = ${Y}, cbY = ${cbY}`);
        assert.equal(iters, cbIter);

        let count = 0;
        let hash = 0;
        for(let ii = 0; ii < X * Y; ii ++) {
            const c = mem[ii + ((cbIter % 2 == 1)? (X * Y) : 0)] === 1;
            if (c) {
                count ++;
                hash = hash ^ Math.imul(ii, 179424673);
                // console.log(ii, hash);
            }
        }

        assert.equal(count, cbCount, `iter = ${cbIter}, count = ${count}, cbCount = ${cbCount}`);
        assert.equal(hash, cbHash, `iter = ${cbIter}, hash = ${hash}, cbHash = ${cbHash}`);

        iters ++;
        return 0;
    }

    const life_run = (await WebAssembly.instantiate(wasm_bytes,  {js: { mem: memory, log: wasm_log, callback: callback }})).instance.exports.run;

    for (let ii = 0; ii < X * Y; ii++)
        mem[ii] = start[ii];

    const res = life_run(X, Y, 100);

    assert.equal(res, 100, `life_run() returned ${res}`);
    assert.equal(iters, 101);

    const expected = `
..........
..x.......
.x.x......
.x..x.x...
.xxxxx.x..
.xx..xx...
....x.....
....x.....
..........
..........
`;

    const end = '\n' + savet(X, Y, Array.from(mem.subarray(0,X*Y)));
    if (end !== expected) {
        process.stdout.write("Expected" + expected + "Received\n" + end);
        console.error("FAILED");
        process.exit(1)
    }

    console.log("PASSED");
}

main();
