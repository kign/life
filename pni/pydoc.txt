

[run]
run(width, height, n_threads, n_iters, pos_start, pos_end, calllback)

    width:      Width of the board; integer
    height:     Height of the board; integer
    n_threads:  Number of worker threads (not yet supported); integer
    n_iters:    Number of iterations to run; integer
    pos_start:  Initial position; boolean list of size width*height
    pos_end:    (Output) Final position; boolean list of size width*height. Must be pre-allocated.
    callback:   Iteration calllback, or None (see below)

    return value: number of actually executed iterations
              (never more than n_iters, but could be less, see below)

callback(n_iter, count, bhash, pos_ptr, fin)

    n_iter:     current iteration (see below); integer
    count:      count of cells; integer
    bhash:      hash of current position; integer
    pos_ptr:    (Output) Internal memory pointer to the current position; integer
                    method `read_ptr` can be used to extract the position
    fin:        1 if this is final iteration, 0 if not

    return value: None or integer; value 1 will trigger iterations to stop immediately

Notes: (1) callback (if defined) is called *before* first iteration, and then
again *after* every iterations, including the last (where fin=1). Therefore,
*normally* callback method is called (1 + n_iters) times.

(2) However this method also detects loops and if your sequence deteriorates
to a loop, it will cut it short; `fin` would still be set to 1 on the last
iteration only regardless. Hash values used in loop detection is passed
to the callback.

[read_ptr]
read_ptr(width, height, pos_ptr, position)

    width:      Width of the board; integer
    height:     Height of the board; integer
    pos_ptr:    Internal memory pointer returned in a callback (see method `run`); integer
    position:   (Output) Intermediary position; boolean list of size width*height.
                    Must be pre-allocated.
    return value: 1 on success
